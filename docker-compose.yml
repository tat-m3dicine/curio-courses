version: "3"
services:
  courses:
    image: courses:local
    environment:
      PORT: 80
      # NODE_ENV: production # to test production builds enable this.
      KAFKA_TOPIC: rewards
      IRP_URL: http://internal-dev3-saale.saal.ai:30307
      MONGO_DB_URL: mongodb://courses-mongodb:27017/saale-courses?replicaSet=rs0
      KAFKA_BROKERS: kafka:9092
      REDIS_PORT: 6379
      REDIS_HOST: courses-redis
    ports:
      - 8093:80
    volumes:
      - courses-node-modules-volume:/app/node_modules
      - ./src:/app/src
    deploy:
      replicas: 1
    depends_on:
      - courses-mongodb
      - kafka
      - courses-redis

  courses-mongodb:
    image: mongo:4.2
    environment:
      MONGO_DATA_DIR: /data/db
      MONGO_LOG_DIR: /dev/null
    volumes:
      - courses-mongodb-volume:/data/db
    ports:
      - 21017:27017
    command: ["--replSet", "rs0"]
    #
    # Use this command to initalize db
    #
    # rs.initiate({
    #   _id: "rs0",
    #   protocolVersion: 1,
    #   members: [
    #      { _id: 0, host : "courses-mongodb:27017" }
    #   ]
    # })

  zoo-keeper:
    image: scr.saal.ai/zookeeper:3.4.9
    ports:
      - "2181:2181"
    environment:
      ZOO_MY_ID: 1
      ZOO_PORT: 2181
      ZOO_SERVERS: zoo-keeper:2181
    volumes:
      - zoo-keeper-data-volume:/data
      - zoo-keeper-datalog-volume:/datalog

  kafka:
    image: scr.saal.ai/kafka:1.1.0
    ports:
      - "9092:9092"
      - "9094:9094"
    environment:
      HOSTNAME_COMMAND: "docker info | grep ^Name: | cut -d' ' -f 2"
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
      KAFKA_ADVERTISED_LISTENERS: INSIDE://:9092,OUTSIDE://localhost:9094
      KAFKA_LISTENERS: INSIDE://:9092,OUTSIDE://:9094
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: INSIDE:PLAINTEXT,OUTSIDE:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: INSIDE
      KAFKA_ZOOKEEPER_CONNECT: "zoo-keeper:2181"
      KAFKA_BROKER_ID: 1
      KAFKA_LOG4J_LOGGERS: "kafka.controller=INFO,kafka.producer.async.DefaultEventHandler=INFO,state.change.logger=INFO"
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_LOG_RETENTION_CHECK_INTERVAL_MS: 300000
      KAFKA_LOG_CLEANUP_POLICY: compact
      KAFKA_LOG_DIRS: "/kafka/kafka-logs"
    volumes:
      - kafka-data-volume:/kafka
      - /var/run/docker.sock:/var/run/docker.sock
    depends_on:
      - zoo-keeper

  courses-redis:
    image: redis:4.0.11-alpine
    ports:
      - 6379:6379
volumes:
  courses-mongodb-volume:
  courses-node-modules-volume:
  kafka-data-volume:
  zoo-keeper-data-volume:
  zoo-keeper-datalog-volume:
